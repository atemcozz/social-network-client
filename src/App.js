import React, { createContext, useEffect } from "react";
import Header from "./components/Header/Header";
import { NEW_POSTS_ROUTE, privateRoutes } from "./utils/routes";
import ActionSideMenu from "./components/ActionSideMenu/ActionSideMenu";
import { Routes, Route, Navigate } from "react-router-dom";
import { publicRoutes } from "./utils/routes";
import { useContext, useState } from "react";
import { Context } from "./index";
import { observer } from "mobx-react";
import Spinner from "./components/UI/Spinner/Spinner";
import FullPost from "./components/FullPost/FullPost";
import Map from "./components/Map/Map";
import MapPicker from "./components/Map/MapPicker";
import Test from "./components/Map/Test";
export const AppContext = createContext(null);
function App() {
  const APP_THEMES = ["theme-dark", "theme-light"];
  const { store } = useContext(Context);

  const getTheme = () => {
    return localStorage.getItem("theme");
  };
  const setTheme = (themeName) => {
    if (APP_THEMES.includes(themeName)) {
      APP_THEMES.forEach((theme) => document.body.classList.remove(theme));
      document.body.classList.add(themeName);
      localStorage.setItem("theme", themeName);
      store.setAppTheme(themeName);
    } else {
      console.error("Theme not found");
    }
  };
  useEffect(() => {
    setTheme(localStorage.getItem("theme"));
    if (localStorage.getItem("token")) {
      store.checkAuth();
    } else store.setLoading(false);
    // Set this to true for production
    var doCache = true;

    // Name our cache
    var CACHE_NAME = "my-pwa-cache-v1";
    if ("serviceWorker" in navigator) {
      window.addEventListener("load", function () {
        navigator.serviceWorker
          .register("./service-worker.js")
          .catch(function (err) {
            console.log(err);
          });
      });
    }
    // Delete old caches that are not our current one!
    window.self.addEventListener("activate", (event) => {
      const cacheWhitelist = [CACHE_NAME];
      event.waitUntil(
        caches.keys().then((keyList) =>
          Promise.all(
            keyList.map((key) => {
              if (!cacheWhitelist.includes(key)) {
                return caches.delete(key);
              }
            })
          )
        )
      );
    });

    // The first time the user starts up the PWA, 'install' is triggered.
    window.self.addEventListener("install", function (event) {
      if (doCache) {
        event.waitUntil(
          caches.open(CACHE_NAME).then(function (cache) {
            // Get the assets manifest so we can see what our js file is named
            // This is because webpack hashes it
            fetch("asset-manifest.json")
              .then((response) => {
                response.json();
              })
              .then((assets) => {
                // Open a cache and cache our files
                // We want to cache the page and the main.js generated by webpack
                // We could also cache any static assets like CSS or images
                const urlsToCache = ["/", assets["main.js"]];
                cache.addAll(urlsToCache);
              });
          })
        );
      }
    });

    // When the webpage goes to fetch files, we intercept that request and serve up the matching files
    // if we have them
    window.self.addEventListener("fetch", function (event) {
      if (doCache) {
        event.respondWith(
          caches.match(event.request).then(function (response) {
            return response || fetch(event.request);
          })
        );
      }
    });
  }, []);
  if (store.isLoading) {
    return (
      <div className="bg-back-darker text-text-base flex items-center justify-center h-screen">
        <Spinner />
      </div>
      //
    );
  }
  if (process.env.REACT_APP_TECHNICAL_WORKS === "1") {
    return (
      <div className="absolute inset-0 bg-primary text-text-base flex justify-center items-center text-xl">
        На сайте ведутся технические работы
      </div>
    );
  }
  return (
    <AppContext.Provider
      value={{
        getTheme,
        setTheme,
      }}
    >
      <div className="App bg-back-darker text-text-base">
        <Header />
        <div className="py-4 md:px-4 flex mx-auto max-w-screen-lg justify-center ">
          <ActionSideMenu />
          <div className="w-full px-4 max-w-xl">
            {!store.isLoading && (
              <Routes>
                <Route path={"/post/:id"} element={<FullPost />} />
                <Route path={"/map"} element={<Test />} />
                {publicRoutes.map((route, index) => (
                  <Route
                    key={index}
                    path={route.path}
                    element={<route.Component />}
                  />
                ))}
                {store.isAuth &&
                  privateRoutes.map((route, index) => (
                    <Route
                      key={index}
                      path={route.path}
                      element={<route.Component />}
                    />
                  ))}
                <Route path="*" element={<Navigate to={NEW_POSTS_ROUTE} />} />
              </Routes>
            )}
          </div>

          <aside className="hidden md:block sticky top-20 w-96 max-h-[80vh]">
            <div className="h-96 bg-back p-4 rounded-lg"></div>
          </aside>
        </div>
      </div>
    </AppContext.Provider>
  );
}

export default observer(App);
